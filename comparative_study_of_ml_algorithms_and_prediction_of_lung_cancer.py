# -*- coding: utf-8 -*-
"""Comparative study of ML Algorithms and Prediction of Lung Cancer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ET9p3at49Yp7j-RwUHEkWBn7Jg4ySlet
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score,precision_score
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import recall_score
from sklearn.metrics import precision_recall_curve
#x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.33,random_state = 42)
from sklearn.preprocessing import StandardScaler
df=pd.read_csv("/content/cancer patient data sets_new (1).csv")
df.head()
print("Size of the dataset(rows,column):",df.shape)
print("Number of elements:",df.size)
print(df.corr())

x = df.loc[:,["Obesity","Alcohol use","Dust Allergy","Air Pollution","Genetic Risk","Passive Smoker","Coughing of Blood"]]
y = df.loc[:,["Level"]].values
df.shape
print(x)
#print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.33,random_state = 42)
from sklearn.preprocessing import StandardScaler
st_x = StandardScaler()
x_train = st_x.fit_transform(x_train)
x_test = st_x.transform(x_test)
print(x_train)
print(x_test)

#KNN
classifier = KNeighborsClassifier(n_neighbors = 10,metric = 'euclidean',p = 2)
#print(df.isnull().any())
classifier.fit(x_train.astype(int),y_train.astype(int))
y_pred = classifier.predict(x_test)
print("KNN:\n",y_pred)

a2=y_test.astype(int)
b2=y_pred.astype(int)

print("Confusion Matrix\n",confusion_matrix(a2,b2))
mat = confusion_matrix(a2,b2)
print("Accuracy : ",accuracy_score(a2,b2))
print("Misclassification : ",1-accuracy_score(a2,b2))
print("Precision Score : ",precision_score(a2,b2,pos_label='positive',average='micro'))
print("Recall Score:",recall_score(a2,b2,pos_label='positive',average='weighted'))
print("F1 score : ",f1_score(a2,b2,average='micro'))

#Random Forest
from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")  
classifier.fit(x_train, y_train)  
y_pred= classifier.predict(x_test)
print("Random Forest\n",y_pred)

a3=y_test.astype(int)
b3=y_pred.astype(int)


print("Confusion Matrix\n",confusion_matrix(a3,b3))
mat = confusion_matrix(a3,b3)
print("Accuracy : ",accuracy_score(a3,b3))
print("Misclassification : ",1-accuracy_score(a3,b3))

print("Precision Score : ",precision_score(a3,b3,pos_label='positive',average='micro'))
print("Recall Score:",recall_score(a3,b3,pos_label='positive',average='weighted'))
print("F1 score : ",f1_score(a3,b3,average='micro'))

#SVM
classifier = SVC(kernel='linear',random_state=0)
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print("SVM:\n",y_pred)

a1=y_test.astype(int)
b1=y_pred.astype(int)

print("Confusion Matrix\n",confusion_matrix(a1,b1))
mat = confusion_matrix(a1,b1)
print("Accuracy : ",accuracy_score(a1,b1))
print("Misclassification : ",1-accuracy_score(a1,b1))

print("Precision Score : ",precision_score(a1,b1,pos_label='positive',average='micro'))
print("Recall Score:",recall_score(a1,b1,pos_label='positive',average='weighted'))
print("F1 score : ",f1_score(a1,b1,average='micro'))

#Decision Tree
classifier = DecisionTreeClassifier(criterion='entropy',random_state = 40)
classifier.fit(x_train,y_train)



dt=classifier.fit(x_train,y_train)
y_pred = dt.predict(x_test)
print("Decision Tree:\n",y_pred)

a=y_test.astype(int)
b=y_pred.astype(int)



print("Confusion Matrix\n",confusion_matrix(a,b))
mat = confusion_matrix(a,b)
print("Accuracy : ",accuracy_score(a,b))
print("Misclassification : ",1-accuracy_score(a,b))
print("Precision Score : ",precision_score(a,b,pos_label='positive',average='micro'))
print("Recall Score:",recall_score(a,b,pos_label='positive',average='weighted'))
print("F1 score : ",f1_score(a,b,average='micro'))

#Plotting
sc =({'Predictions': ['Accuracy', 'Precision Score', 'F1 Score','Accuracy', 'Precision Score', 'F1 Score','Accuracy', 'Precision Score', 'F1 Score','Accuracy', 'Precision Score', 'F1 Score'],'Algorithm':['Decision Tree','Decision Tree','Decision Tree','SVM','SVM','SVM','KNN','KNN','KNN','Random Forest','Random Forest','Random Forest'],'Score':[1,1,1,0.915,0.915,0.915,0.875,0.875,0.875,1,1,1]})
d=pd.DataFrame(sc)
print(d)
fig = sb.factorplot(x = 'Predictions', y = 'Score',hue='Algorithm',data =d,kind='bar')
plt.show()

precision, recall, thresholds = precision_recall_curve(a,b)
precision1, recall1, thresholds1 = precision_recall_curve(a1,b1)
precision2, recall2, thresholds2 = precision_recall_curve(a2,b2)
fig, ax = plt.subplots()
ax.plot(recall, precision,color='purple')
ax.plot(recall1, precision1,color='red')
ax.plot(recall2, precision2,color='green')

a=input("Would you like to know if you have lung cancer(Y/N)")


if(a=='Y'):
  print("On a scale of 1-9 enter the values appropriately")
  Obesity = int(input("Obesity: "))
  Alcohol_Consumption = int(input("Alcohol Consumption: "))
  Dust_Allergy = int(input("Dust Allergy: "))
  Air_Pollution = int(input("Air Pollution: "))
  Genetic_Risk = int(input("Genetic Risk:"))
  Passive_Smoker = int(input("Passive Smoker: "))
  Coughing_of_Blood = int(input("Coughing of Blood: "))
  d1=np.array([[Obesity,Alcohol_Consumption,Dust_Allergy,Air_Pollution,Genetic_Risk,Passive_Smoker,Coughing_of_Blood]])
  d1_prediction=dt.predict(d1)
  d2=['Yes you might have Lung Cancer','No you dont have Lung Cancer']
  print(d2[int(d1_prediction)])
else:
  print("Thank you for using lung cancer detection system")