# -*- coding: utf-8 -*-
"""Comparative study of ML Algorithms and Price Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16W85AD82y59VvQRodwUqpIyPiBJXmp5Z
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score,precision_score
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import recall_score
from sklearn.metrics import precision_recall_curve
#x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.33,random_state = 42)
from sklearn.preprocessing import StandardScaler
df=pd.read_csv("/content/mobile_price_range_data.csv")
df.head()
#print("Size of the dataset(rows,column):",df.shape)
#print("Number of elements:",df.size)
print(df.corr())

x = df.loc[:,["ram","battery_power","px_width","px_height","blue","fc","dual_sim","three_g","four_g","wifi","touch_screen","int_memory"]]
y = df.loc[:,["price_range"]].values
df.shape
print(x)
#print(y)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.33,random_state = 42)
from sklearn.preprocessing import StandardScaler
st_x = StandardScaler()
x_train = st_x.fit_transform(x_train)
x_test = st_x.transform(x_test)
print(x_train)
print(x_test)

#KNN
classifier = KNeighborsClassifier(n_neighbors = 10,metric = 'euclidean',p = 2)
#print(df.isnull().any())
classifier.fit(x_train.astype(int),y_train.astype(int))
y_pred = classifier.predict(x_test)
print("KNN:\n",y_pred)

a2=y_test.astype(int)
b2=y_pred.astype(int)

print("Confusion Matrix\n",confusion_matrix(a2,b2))
mat = confusion_matrix(a2,b2)
print("Accuracy : ",accuracy_score(a2,b2))
print("Misclassification : ",1-accuracy_score(a2,b2))
print("Precision Score : ",precision_score(a2,b2,pos_label='positive',average='micro'))

#Random Forest
from sklearn.ensemble import RandomForestClassifier  
classifier= RandomForestClassifier(n_estimators= 10, criterion="entropy")  
classifier.fit(x_train, y_train)  
y_pred= classifier.predict(x_test)
print("Random Forest\n",y_pred)

a3=y_test.astype(int)
b3=y_pred.astype(int)


print("Confusion Matrix\n",confusion_matrix(a3,b3))
mat = confusion_matrix(a3,b3)
print("Accuracy : ",accuracy_score(a3,b3))
print("Misclassification : ",1-accuracy_score(a3,b3))

print("Precision Score : ",precision_score(a3,b3,pos_label='positive',average='micro'))

#SVM
sv=classifier.fit(x_train,y_train)

classifier = SVC(kernel='linear',random_state=0)
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)
print("SVM:\n",y_pred)

a1=y_test.astype(int)
b1=y_pred.astype(int)

print("Confusion Matrix\n",confusion_matrix(a1,b1))
mat = confusion_matrix(a1,b1)
print("Accuracy : ",accuracy_score(a1,b1))
print("Misclassification : ",1-accuracy_score(a1,b1))

print("Precision Score : ",precision_score(a1,b1,pos_label='positive',average='micro'))

#Decision Tree
classifier = DecisionTreeClassifier(criterion='entropy',random_state = 40)
classifier.fit(x_train,y_train)



dt=classifier.fit(x_train,y_train)
y_pred = dt.predict(x_test)
print("Decision Tree:\n",y_pred)

a=y_test.astype(int)
b=y_pred.astype(int)



print("Confusion Matrix\n",confusion_matrix(a,b))
mat = confusion_matrix(a,b)
print("Accuracy : ",accuracy_score(a,b))
print("Misclassification : ",1-accuracy_score(a,b))
print("Precision Score : ",precision_score(a,b,pos_label='positive',average='micro'))

a=input("Would you like to know the probable price range of mobile phone(Y/N)")

if(a=='Y'):
  print("On a scale of 200-4000 enter the values appropriately")
  ram = int(input("ram" ))
  print("On a scale of 500-2000 enter the values appropriately")
  battery_power = int(input("battery_power "))
  print("On a scale of 500-2000 enter the values appropriately")
  px_width = int(input("px_width "))
  print("On a scale of 0-2000 enter the values appropriately")
  px_height = int(input("px_height"))
  print("On a scale of 0-20 enter the values appropriately")
  fc = int(input("fc"))
  print("On a scale of 0-70 enter the values appropriately")
  int_memory = int(input("int_memory "))
  d1=np.array([[ram,battery_power,px_width,px_height,fc,int_memory]])
  d1_prediction=dt.predict(d1)
  d2=['low ','medium','high','very high']
  print(d2[int(d1_prediction)])
else:
  print("Thank you for using price predicter")